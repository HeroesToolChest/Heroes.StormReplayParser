variables:
  main_project: Heroes.StormReplayParser\Heroes.StormReplayParser.csproj
  publish_any_path: .\bin\publish\any\
  nupkg_path: .\bin\nupkg\any\

jobs:
- template: azure-pipelines-template.yml
  parameters:
    name: Linux
    pool:
      vmImage: 'ubuntu-latest'

- template: azure-pipelines-template.yml
  parameters:
    name: macOS
    pool:
      vmImage: 'macOS-latest'
  
- template: azure-pipelines-template.yml
  parameters:
    name: Windows
    pool:
      vmImage: 'windows-latest'

- job: Artifacts
  dependsOn:
    - Linux
    - macOs
    - Windows
  pool:
    vmImage: 'windows-latest'
  variables:
    - group: secret
  condition: and(succeeded(), ne(variables['build.Reason'], 'PullRequest'))
  steps:
    - task: DownloadSecureFile@1
      displayName: Download cert
      inputs:
        secureFile: certificate

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 7.0.x
        installationPath: $(Agent.ToolsDirectory)\dotnet

    - task: NuGetToolInstaller@1
      displayName: nuget installer 6.3.1
      inputs:
        versionSpec: '6.3.1'

    - powershell: |
        $csproj = get-content Heroes.StormReplayParser\Heroes.StormReplayParser.csproj
        $sv = $csproj | select-string -pattern "<Version>"
        $sv -match "<Version>(?<content>.*)</Version>"
        $value = $matches['content']
        $first_part_version,$build_version = $value.Split("-")      
        $version = $first_part_version + "-build.$(Build.BuildNumber)"
        $csproj.replace($sv, "<Version>$version</Version>") | out-file $env:MAIN_PROJECT
        echo "Version - $version"
      displayName: Non-master version build number
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DotNetCoreCLI@2
      inputs:
        projects: $(MAIN_PROJECT)
        command: 'restore'
        includeNuGetOrg: true
      displayName: 'Restore'
      
    - powershell: dotnet publish $env:MAIN_PROJECT -c release --no-restore -o $env:PUBLISH_ANY_PATH
      displayName: Publish release

    - powershell: dotnet pack $env:MAIN_PROJECT -c release --no-build -o $env:NUPKG_PATH -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg     
      displayName: Nuget pack

    - task: NuGetCommand@2
      displayName: Sign nuget pack
      inputs:
        command: 'custom'
        arguments: 'sign $(nupkg_path)Heroes.StormReplayParser.*.nupkg -CertificatePath $(Agent.TempDirectory)\certificate -CertificatePassword $(cert_password) -Timestamper http://ts.ssl.com'

    - task: NuGetCommand@2
      displayName: Sign symbol pack
      inputs:
        command: 'custom'
        arguments: 'sign $(nupkg_path)Heroes.StormReplayParser.*.snupkg -CertificatePath $(Agent.TempDirectory)\certificate -CertificatePassword $(cert_password) -Timestamper http://ts.ssl.com'
        
    - powershell: |
        $s = get-content $env:MAIN_PROJECT | select-string -pattern "<Version>"
        $s -match "<Version>(?<content>.*)</Version>"
        $m = $matches['content']        
        echo "##vso[task.setvariable variable=version]$m"
        echo "Package version - $m"
      displayName: Prep

    - task: ArchiveFiles@2
      displayName: Archive Release Files - Zip
      inputs:
        archiveType: 'zip'
        rootFolderOrFile: '$(publish_any_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\Heroes.StormReplayParser.$(version).zip'

    - task: ArchiveFiles@2
      displayName: Archive Release Files - Tar
      inputs:
        archiveType: 'zip'
        rootFolderOrFile: '$(publish_any_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\Heroes.StormReplayParser.$(version).tar.gz'
        
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts - Release Files - Zip
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\Heroes.StormReplayParser.$(version).zip'
        artifactName: 'Heroes.StormReplayParser'

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts - Release Files - Tar
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\Heroes.StormReplayParser.$(version).tar.gz'
        artifactName: 'Heroes.StormReplayParser'
        
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact - Nuget
      inputs:
        pathtoPublish: '$(nupkg_path)'
        artifactName: 'Heroes.StormReplayParser-Nuget'
